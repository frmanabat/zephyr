/*
 * Copyright (c) 2025 Analog Devices Inc.
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef ZEPHYR_INCLUDE_DRIVERS_SENSOR_MAX40109_H_
#define ZEPHYR_INCLUDE_DRIVERS_SENSOR_MAX40109_H_

#define FLOAT_TO_HEX(f) ({ \
    union { float f; uint32_t u; } _tmp; \
    _tmp.f = (f); \
    _tmp.u; \
})



/** MTP Registers */

#define CAL_DATA0            0x00u
#define CAL_DATA1            0x01u
#define CAL_DATA2            0x02u
#define CAL_DATA3            0x03u
#define CAL_DATA4            0x04u
#define CAL_DATA5            0x05u
#define CAL_DATA6            0x06u
#define CAL_DATA7            0x07u
#define CAL_DATA8            0x08u
#define CAL_DATA9            0x09u
#define CAL_DATA10           0x0au
#define CAL_DATA11           0x0bu
#define CAL_DATA12           0x0cu
#define CAL_DATA13           0x0du
#define CAL_DATA14           0x0eu
#define CAL_DATA15           0x0fu
#define CAL_DATA16           0x10u
#define CAL_DATA17           0x11u
#define CAL_DATA18           0x12u
#define CAL_DATA19           0x13u
#define CAL_DATA20           0x14u
#define CAL_DATA21           0x15u
#define CAL_DATA22           0x16u
#define CAL_DATA23           0x17u
#define CAL_DATA24           0x18u
#define CAL_DATA25           0x19u
#define CAL_DATA26           0x1au
#define CAL_DATA27           0x1bu
#define CAL_DATA28           0x1cu
#define CAL_DATA29           0x1du
#define CAL_DATA30           0x1eu
#define CAL_DATA31           0x1fu
#define CAL_DATA32           0x20u
#define CAL_DATA33           0x21u
#define CAL_DATA34           0x22u
#define CAL_DATA35           0x23u
#define CAL_DATA36           0x24u
#define CAL_DATA37           0x25u
#define CAL_DATA38           0x26u
#define CAL_DATA39           0x27u
#define SP_DATA0             0x28u
#define SP_DATA1             0x29u
#define SP_DATA2             0x2au
#define SP_DATA3             0x2bu
#define SP_DATA4             0x2cu
#define SP_DATA5             0x2du
#define SP_DATA6             0x2eu
#define SP_DATA7             0x2fu
#define SP_DATA8             0x30u
#define SP_DATA9             0x31u
#define SP_DATA10            0x32u
#define SP_DATA11            0x33u
#define SP_DATA12            0x34u
#define SP_DATA13            0x35u
#define SP_DATA14            0x36u
#define SP_DATA15            0x37u
#define DIAG_DATA0           0x38u
#define DIAG_DATA1           0x39u
#define DIAG_DATA2           0x3au
#define DIAG_DATA3           0x3bu
#define PRESSURE_THRESHOLD   0x3cu
#define ZERO_PRESSURE_OFFSET 0x3du
#define TEMP_OFFSET          0x3eu
#define CLIPPING_THRESHOLD   0x3fu
#define DIAGNOSTIC_RANGE     0x40u
#define FUNC_CONFIGURATION   0x41u
#define PGA_TEMP_PRES_GAIN   0x42u
#define MISCELLANEOUS        0x43u
#define CONFIG_MTP           0x44u

/** DIAG_DATA0 MASK */
#define OVER_PRESSURE_POSITIVE_MASK  GENMASK(15, 8)
#define UNDER_PRESSURE_POSITIVE_MASK GENMASK(7, 0)

/** DIAG DATA1 MASK */
#define OVER_PRESSURE_NEGATIVE_MASK  GENMASK(15, 8)
#define UNDER_PRESSURE_NEGATIVE_MASK GENMASK(7, 0)

/** DIAG DATA2 MASK */
#define OVER_TEMPERATURE_VOLTAGE_MASK GENMASK(15, 8)
#define UNDER_TEMPERATURE_VOLTAGE_MASK GENMASK(7, 0)

/** DIAG DATA3 MASK */
#define OVER_VOLTAGE_DRIVE_MASK GENMASK(15, 8)
#define UNDER_VOLTAGE_DRIVE_MASK GENMASK(7, 0)

/** PRESSURE THRESHOLD MASK */
#define PRIMARY_THRESHOLD_PRESSURE_VALUE_MASK GENMASK(15, 8)
#define HYSTERESIS_THRESHOLD_PRESSURE_VALUE_MASK GENMASK(7, 0)

enum max40109_sensor_attr {
    SENSOR_ATTR_MAX40109_ANALOG_FILTER_BW_SETUP = SENSOR_ATTR_PRIV_START,
    SENSOR_ATTR_MAX40109_SENSOR_OFFSET_CAL_CONFIG,
    SENSOR_ATTR_MAX40109_ALERT_MODE,
    SENSOR_ATTR_MAX40109_ANALOG_OUTPUT_STAGE,
    SENSOR_ATTR_MAX40109_DIGITAL_FILTER_SETUP,
    SENSOR_ATTR_MAX40109_TEMP_MODE,
    SENSOR_ATTR_MAX40109_DRV_SCALE,
    SENSOR_ATTR_MAX40109_MTP_PROTOTYPE_EN,
    SENSOR_ATTR_MAX40109_MTP_START_PROG,
    SENSOR_ATTR_MAX40109_MTP_STOP_PROG,
    SENSOR_ATTR_MAX40109_OVER_PRESSURE_THRESHOLD_POSITIVE,
    SENSOR_ATTR_MAX40109_UNDER_PRESSURE_THRESHOLD_POSITIVE,
    SENSOR_ATTR_MAX40109_OVER_PRESSURE_THRESHOLD_NEGATIVE,
    SENSOR_ATTR_MAX40109_UNDER_PRESSURE_THRESHOLD_NEGATIVE,
    SENSOR_ATTR_MAX40109_OVER_TEMPERATURE_VOLTAGE_THRESHOLD,
    SENSOR_ATTR_MAX40109_UNDER_TEMPERATURE_VOLTAGE_THRESHOLD,
    SENSOR_ATTR_MAX40109_OVER_VOLTAGE_DRIVE_THRESHOLD,
    SENSOR_ATTR_MAX40109_UNDER_VOLTAGE_DRIVE_THRESHOLD,
    SENSOR_ATTR_MAX40109_PRIMARY_THRESHOLD_PRESSURE_VALUE,
    SENSOR_ATTR_MAX40109_HYSTERESIS_THRESHOLD_PRESSURE_VALUE,
};

enum max40109_sensor_channel {
    SENSOR_CHAN_AMBIENT_TEMP_CALIB_COEFF_K0 = SENSOR_CHAN_PRIV_START,
    SENSOR_CHAN_AMBIENT_TEMP_CALIB_COEFF_K1,
    SENSOR_CHAN_AMBIENT_TEMP_CALIB_COEFF_K2,
    SENSOR_CHAN_AMBIENT_TEMP_CALIB_COEFF_K3,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_H0,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_H1,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_H2,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_H3,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_G0,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_G1,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_G2,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_G3,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_N0,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_N1,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_N2,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_N3,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_M0,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_M1,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_M2,
    SENSOR_CHAN_PRESSURE_CALIB_COEFF_M3,
    SENSOR_CHAN_AMBIENT_TEMP_RAW,
    SENSOR_CHAN_PRESS_RAW,
};

enum sensor_trigger_type_max40109 {
    SENSOR_TRIG_PRESSURE_DATA_READY = SENSOR_TRIG_PRIV_START,
    SENSOR_TRIG_TEMP_DATA_READY,
    SENSOR_TRIG_DRIVE_VOLTAGE_UV,
    SENSOR_TRIG_DRIVE_VOLTAGE_OV,
    SENSOR_TRIG_INPUT_TEMPERATURE_VOLTAGE_UV,
    SENSOR_TRIG_INPUT_TEMPERATURE_VOLTAGE_OV,
    SENSOR_TRIG_INPUT_PRESSURE_NEGATIVE_UV,
    SENSOR_TRIG_INPUT_PRESSURE_NEGATIVE_OV,
    SENSOR_TRIG_INPUT_PRESSURE_POSITIVE_UV,
    SENSOR_TRIG_INPUT_PRESSURE_POSITIVE_OV,
};

enum sensor_sampling_rate_max40109 {
	SENSOR_SAMPLING_RATE_MAX40109_1000HZ_1HZ = 0x00,
	SENSOR_SAMPLING_RATE_MAX40109_1000HZ_10HZ,
	SENSOR_SAMPLING_RATE_MAX40109_2000HZ_1HZ,
	SENSOR_SAMPLING_RATE_MAX40109_2000HZ_10HZ,
	SENSOR_SAMPLING_RATE_MAX40109_4000HZ_1HZ,
	SENSOR_SAMPLING_RATE_MAX40109_4000HZ_10HZ,
	SENSOR_SAMPLING_RATE_MAX40109_8000HZ_1HZ,
	SENSOR_SAMPLING_RATE_MAX40109_8000HZ_10HZ,
	SENSOR_SAMPLING_RATE_MAX40109_16000HZ_1HZ,
	SENSOR_SAMPLING_RATE_MAX40109_16000HZ_10HZ,
};

enum sensor_max40109_pga_pressure_gain {
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_5 = 0x0F,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_10 = 0x00,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_15,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_20,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_24,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_40,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_60,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_72,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_90,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_108,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_126,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_144,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_160,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_180,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_200,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_252,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_540 = 0x10,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_1080,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_1440,
	SENSOR_MAX40109_PGA_PRESSURE_GAIN_2520,
};


enum max40109_aos_mode {
	MAX40109_AOS_SHUTDOWN                  = 0x0,

	// Ratio-metric voltage modes
    MAX40109_AOS_RATIO_METRIC_VDD5V_1X= 0x02 ,
    MAX40109_AOS_RATIO_METRIC_VDD5V_0_91X,
    MAX40109_AOS_RATIO_METRIC_VDD5V_0_6X,

    // External ratio-metric voltage modes
    MAX40109_AOS_RATIO_METRIC_EXT_0_1515X,
    MAX40109_AOS_RATIO_METRIC_EXT_0_25X,

    // Absolute current mode
    MAX40109_AOS_ABSOLUTE_CURRENT,

    // Absolute voltage modes
    MAX40109_AOS_ABSOLUTE_VOLTAGE_4X,
    MAX40109_AOS_ABSOLUTE_VOLTAGE_6X_1,
    MAX40109_AOS_ABSOLUTE_VOLTAGE_6X_2,

    // External absolute voltage modes
    MAX40109_AOS_ABSOLUTE_VOLTAGE_EXT_0_4X,
    MAX40109_AOS_ABSOLUTE_VOLTAGE_EXT_1X,

    // Additional ratio-metric voltage modes (same as 0x2)
    MAX40109_AOS_RATIO_METRIC_VDD5V_1X_ALT1,
    MAX40109_AOS_RATIO_METRIC_VDD5V_1X_ALT2,
    MAX40109_AOS_RATIO_METRIC_VDD5V_1X_ALT3,
};


enum sensor_max40109_pga_temperature_gain {
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_1_5 = 0x00,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_2,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_3,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_5,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_6,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_10,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_15,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_20,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_24,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_30,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_36,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_40,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_45,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_60,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_72,
	SENSOR_MAX40109_PGA_TEMPERATURE_GAIN_90,
};

enum max40109_analog_filter_bw_settings {
	MAX40109_ANALOG_FILTER_BW_1200HZ = 0x00,
	MAX40109_ANALOG_FILTER_BW_900HZ,
	MAX40109_ANALOG_FILTER_BW_37000HZ,
	MAX40109_ANALOG_FILTER_BW_45000HZ,
};

enum max40109_digital_filter_setup {
	MAX40109_DIGITAL_FILTER_SETUP_AVERAGE_NONE = 0,
	MAX40109_DIGITAL_FILTER_SETUP_AVERAGE_4,
	MAX40109_DIGITAL_FILTER_SETUP_AVERAGE_8,
	MAX40109_DIGITAL_FILTER_SETUP_AVERAGE_16,
	MAX40109_DIGITAL_FILTER_SETUP_AVERAGE_32,
	MAX40109_DIGITAL_FILTER_SETUP_AVERAGE_64,
	MAX40109_DIGITAL_FILTER_SETUP_AVERAGE_128,
};

enum max40109_alert_mode {
	MAX40109_ALERT_ISSUES_INTERRUPT = 0x00,
	MAX40109_ALERT_ISSUES_TEMPERATURE_DATA_IN_PWM_FASHION,
	MAX40109_ALERT_ISSUES_PRESSURE_DIGITAL_OUTPUT_CASE_1,
	MAX40109_ALERT_ISSUES_PRESSURE_DIGITAL_OUTPUT_CASE_2,
	MAX40109_ALERT_ISSUES_PRESSURE_DIGITAL_OUTPUT_CASE_3,
	MAX40109_ALERT_ISSUES_PRESSURE_DIGITAL_OUTPUT_CASE_4,
};

enum max40109_temp_mode {
	MAX40109_TEMP_MODE_INT_SE_GAIN_1           = 0x0, // INT, Single-ended, Gain = 1
	MAX40109_TEMP_MODE_INT_SE_GAIN_GT_1        = 0x1, // INT, Single-ended, Gain > 1
	MAX40109_TEMP_MODE_INT_DIFF_DAC_OFFSET     = 0x2, // INT, Differential, DAC Offset
	MAX40109_TEMP_MODE_DRV_SE_GAIN_1           = 0x3, // DRV, Single-ended, Gain = 1
	MAX40109_TEMP_MODE_DRV_DIFF_DAC_OFFSET     = 0x4, // DRV, Differential, DAC Offset
};


enum max40109_drv_scale {
	MAX40109_DRV_SCALE_1_0 = 0x00,
	MAX40109_DRV_SCALE_0_5,
	MAX40109_DRV_SCALE_0_375,
	MAX40109_DRV_SCALE_0_25,
};

enum max40109_calibration_coefficients {
    MAX40109_CALIBRATION_K0,
    MAX40109_CALIBRATION_K1,
    MAX40109_CALIBRATION_K2,
    MAX40109_CALIBRATION_K3,
    MAX40109_CALIBRATION_H0,
    MAX40109_CALIBRATION_H1,
    MAX40109_CALIBRATION_H2,
    MAX40109_CALIBRATION_H3,
    MAX40109_CALIBRATION_G0,
    MAX40109_CALIBRATION_G1,
    MAX40109_CALIBRATION_G2,
    MAX40109_CALIBRATION_G3,
    MAX40109_CALIBRATION_N0,
    MAX40109_CALIBRATION_N1,
    MAX40109_CALIBRATION_N2,
    MAX40109_CALIBRATION_N3,
    MAX40109_CALIBRATION_M0,
    MAX40109_CALIBRATION_M1,
    MAX40109_CALIBRATION_M2,
    MAX40109_CALIBRATION_M3,
};

int max40109_reg_read(const struct device *dev, uint8_t reg_addr, uint8_t *val, uint8_t length);
int max40109_reg_write(const struct device *dev, uint8_t reg_addr, uint8_t val);
int max40109_reg_write_multiple(const struct device *dev, uint8_t reg_addr, const uint8_t *val,
				uint8_t length);
int max40109_reg_update(const struct device *dev, uint8_t reg_addr, uint8_t mask, uint8_t val);
int max40109_mtp_calibration(const struct device *dev, enum max40109_calibration_coefficients coeff,
                float value, bool burn); // Tested prototype not burned
int max40109_mtp_calibration_read(const struct device *dev, enum max40109_calibration_coefficients coeff,
                float *value); // Tested
int max40109_mtp_read(const struct device *dev, uint8_t mtp_addr, uint8_t *val); // Tested
int max40109_mtp_write(const struct device *dev, uint8_t mtp_addr, const uint8_t *val); // Tested
int max40109_mtp_update(const struct device *dev, uint8_t mtp_addr, uint16_t mask, uint16_t val);
int max40109_mtp_initialize(const struct device *dev); // Tested
int max40109_mtp_burn(const struct device *dev, uint8_t mtp_addr, const uint8_t *val); //Tested

#endif /* ZEPHYR_INCLUDE_DRIVERS_SENSOR_MAX40109_H_ */
